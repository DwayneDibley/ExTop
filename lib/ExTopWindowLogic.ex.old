defmodule WxTopWindowLogic do
  require Logger

  def init() do
    Logger.info("LOGIC")
    {_, _, listCtrl} = WinInfo.get_by_name(:list_ctrl)
    addProcs(listCtrl)
  end

  def addProcs(listCtrl) do
    # addProcs(listCtrl, Enum.reverse(:erlang.processes()), 0)
    addProcs(listCtrl, :erlang.processes(), 0)
  end

  # Iterate over the process list.
  defp addProcs(listCtrl, [], _) do
    :ok
  end

  defp addProcs(listCtrl, [h | t], idx) do
    addProcessData(listCtrl, h, idx)
    addProcs(listCtrl, t, idx + 1)
  end

  # Get and add the process data for the given PID
  def addProcessData(listCtrl, pid, idx) do
    procInfo =
      :erlang.process_info(pid, [:registered_name, :heap_size, :memory, :message_queue_len])

    addRow(listCtrl, idx, [pid | procInfo])

    # :wxListCtrl.insertItem(listCtrl, idx, "  " <> "#{inspect(pid)}")
    #
    # {x, y, decent, extLeading} =
    #   :wxListCtrl.getTextExtent(listCtrl, "  " <> "#{inspect(pid)}", [])
    #
    # # Logger.info("width = #{inspect(newWidth)}")
    #
    # # cond do
    # #  x
    # # end
    #
    # case procInfo[:registered_name] do
    #   [] ->
    #     nil
    #
    #   name ->
    #     :wxListCtrl.setItem(listCtrl, idx, 1, "#{inspect(name)}")
    # end
    #
    # Logger.info("heap = #{inspect(procInfo)}")
    # :wxListCtrl.setItem(listCtrl, idx, 2, "#{inspect(procInfo[:heap_size])}")
    # :wxListCtrl.setItem(listCtrl, idx, 3, "#{inspect(procInfo[:memory])}")
    # :wxListCtrl.setItem(listCtrl, idx, 4, "#{inspect(procInfo[:message_queue_len])}")
  end

  def addRow(listCtrl, idx, [h | t]) do
    data = "  " <> "#{inspect(h)}"
    :wxListCtrl.insertItem(listCtrl, idx, data)
    checkColWidth(listCtrl, 0, data)
    addItemToRow(listCtrl, idx, t, 1)
  end

  def addItemToRow(listCtrl, idx, [], col) do
    :ok
  end

  def addItemToRow(listCtrl, idx, [{_, val} | t], col) do
    data =
      case val do
        [] -> data = ""
        _ -> "#{inspect(val)}"
      end

    :wxListCtrl.setItem(listCtrl, idx, col, data)
    checkColWidth(listCtrl, col, data)
    addItemToRow(listCtrl, idx, t, col + 1)
  end

  def checkColWidth(listCtrl, col, data) do
    {width, _y, _decent, _extLeading} = :wxListCtrl.getTextExtent(listCtrl, data, [])
    width = width + 10
    cwidth = :wxListCtrl.getColumnWidth(listCtrl, col)
    Logger.info("col = #{inspect(col)} width = #{inspect(width)}, cwidth = #{inspect(cwidth)}")

    cond do
      width > cwidth -> :wxListCtrl.setColumnWidth(listCtrl, col, width)
      true -> :ok
    end
  end

  def sortColumns(data, key, ascending \\ true) do
  end
end
